{"version":3,"sources":["index.umd.js"],"names":[],"mappingsfile":"index.js","sourcesContent":["(function (global, factory) {\n  typeof exports === 'object' && typeof module !== 'undefined' ? module.exports = factory() :\n  typeof define === 'function' && define.amd ? define(factory) :\n  (global = global || self, global.ClipboardCopyElement = factory());\n}(this, function () { \n\n  function createNode(text) {\n    const node = document.createElement('pre');\n    node.style.width = '1px';\n    node.style.height = '1px';\n    node.style.position = 'fixed';\n    node.style.top = '5px';\n    node.textContent = text;\n    return node;\n  }\n\n  function copyNode(node) {\n    if ('clipboard' in navigator) {\n      // eslint-disable-next-line flowtype/no-flow-fix-me-comments\n      // $FlowFixMe Clipboard is not defined in Flow yet.\n      return navigator.clipboard.writeText(node.textContent);\n    }\n\n    const selection = getSelection();\n\n    if (selection == null) {\n      return Promise.reject(new Error());\n    }\n\n    selection.removeAllRanges();\n    const range = document.createRange();\n    range.selectNodeContents(node);\n    selection.addRange(range);\n    document.execCommand('copy');\n    selection.removeAllRanges();\n    return Promise.resolve();\n  }\n  function copyText(text) {\n    if ('clipboard' in navigator) {\n      // eslint-disable-next-line flowtype/no-flow-fix-me-comments\n      // $FlowFixMe Clipboard is not defined in Flow yet.\n      return navigator.clipboard.writeText(text);\n    }\n\n    const body = document.body;\n\n    if (!body) {\n      return Promise.reject(new Error());\n    }\n\n    const node = createNode(text);\n    body.appendChild(node);\n    copyNode(node);\n    body.removeChild(node);\n    return Promise.resolve();\n  }\n\n  function copy(button) {\n    const id = button.getAttribute('for');\n    const text = button.getAttribute('value');\n\n    function trigger() {\n      button.dispatchEvent(new CustomEvent('clipboard-copy', {\n        bubbles: true\n      }));\n    }\n\n    if (text) {\n      copyText(text).then(trigger);\n    } else if (id) {\n      const root = 'getRootNode' in Element.prototype ? button.getRootNode() : button.ownerDocument;\n      if (!(root instanceof Document || 'ShadowRoot' in window && root instanceof ShadowRoot)) return;\n      const node = root.getElementById(id);\n      if (node) copyTarget(node).then(trigger);\n    }\n  }\n\n  function copyTarget(content) {\n    if (content instanceof HTMLInputElement || content instanceof HTMLTextAreaElement) {\n      return copyText(content.value);\n    } else if (content instanceof HTMLAnchorElement && content.hasAttribute('href')) {\n      return copyText(content.href);\n    } else {\n      return copyNode(content);\n    }\n  }\n\n  function clicked(event) {\n    const button = event.currentTarget;\n\n    if (button instanceof HTMLElement) {\n      copy(button);\n    }\n  }\n\n  function keydown(event) {\n    if (event.key === ' ' || event.key === 'Enter') {\n      const button = event.currentTarget;\n\n      if (button instanceof HTMLElement) {\n        event.preventDefault();\n        copy(button);\n      }\n    }\n  }\n\n  function focused(event) {\n    event.currentTarget.addEventListener('keydown', keydown);\n  }\n\n  function blurred(event) {\n    event.currentTarget.removeEventListener('keydown', keydown);\n  }\n\n  class ClipboardCopyElement extends HTMLElement {\n    constructor() {\n      super();\n      this.addEventListener('click', clicked);\n      this.addEventListener('focus', focused);\n      this.addEventListener('blur', blurred);\n    }\n\n    connectedCallback() {\n      if (!this.hasAttribute('tabindex')) {\n        this.setAttribute('tabindex', '0');\n      }\n\n      if (!this.hasAttribute('role')) {\n        this.setAttribute('role', 'button');\n      }\n    }\n\n    get value() {\n      return this.getAttribute('value') || '';\n    }\n\n    set value(text) {\n      this.setAttribute('value', text);\n    }\n\n  }\n\n  if (!window.customElements.get('clipboard-copy')) {\n    window.ClipboardCopyElement = ClipboardCopyElement;\n    window.customElements.define('clipboard-copy', ClipboardCopyElement);\n  }\n\n  return ClipboardCopyElement;\n\n}));\n"]}